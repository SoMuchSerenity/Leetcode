class Solution:
    def longestPalindrome(self, s: str) -> str:
        l = len(s)
        m=0
        n=0
        length = 0
        longest = ''
        for center in range(int(l/2),l):
            for i in range(l-center):
                if center+i <= l-1 and center -1 -i >=0 and s[center+i] == s[center-1-i]:
                    if length < 2*i +2:
                        length = 2*i +2
                        m = center
                        n = i
                        longest = s[m-n-1:m+n+1]
                else:
                    break

        for center in range(int(l/2),-1,-1):
            for i in range(center):
                if center -i -1>=0 and center+i<= l-1 and s[center-1-i] == s[center+i]:
                    if length < 2*i +2:
                        length = 2*i +2
                        m = center 
                        n = i
                        longest = s[m-n-1:m+n+1]
                else:
                    break
        for center in range(int(l/2)-1,l):
            for i in range(min(center+1,l-center)):
                if center+i <=l-1 and center-i>=0 and s[center+i] == s[center-i]:
                    if length < 2*i+1:
                        length = 2*i + 1 
                        m = center
                        n = i
                        longest = s[m-n:m+n+1]
                else:
                    break
        for center in range(int(l/2),-1,-1):
            for i in range(min(center+1,l-center)):
                if center+i<=l-1 and center-i>=0 and s[center+i] == s[center-i]:
                    if length < 2*i+1:
                        length = 2*i + 1 
                        m = center
                        n = i
                        longest = s[m-n:m+n+1]
                else:
                    break

        if length ==1:
            return s[0:1]
        else:
            return longest
